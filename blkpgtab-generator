#!/bin/bash
#
# Copyright 2023-2024 GaÃ«l PORTAY
#           2023-2024 Rtone.
#
# SPDX-License-Identifier: LGPL-2.1-or-later
#

set -e
set -o pipefail

proc_cmdline() {
	if [[ "$SYSTEMD_PROC_CMDLINE" ]]
	then
		echo "$SYSTEMD_PROC_CMDLINE"
		return
	fi

	if [[ -e "$ROOT/proc/cmdline" ]]
	then
		cat "$ROOT/proc/cmdline"
		return
	fi

	echo
}

proc_cmdline_parse() {
	local words

	read -r -a words < <(proc_cmdline)
	for word in "${words[@]}"
	do
		if [[ "$word" =~ ^([^=]+)=(.*) ]]
		then
	                key="${BASH_REMATCH[1]}"
	                val="${BASH_REMATCH[2]}"
		else
	                key="$word"
	                val=""
		fi

		if [[ "$key" == blkpg ]]
		then
			eval "arg_blkpg_enabled=${val:-yes}"
		fi
	done
}

add_service() {
	cat <<EOF
# Automatically generated by blkpgtab-generator

[Unit]
Documentation=man:blkpgtab(5) man:blkpgtab-generator(8)
SourcePath=$1
DefaultDependencies=no
Conflicts=shutdown.target
Before=shutdown.target
After=blockdev@$2.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/sbin/blkpg-part add $3 $4 $5 $6
EOF
}

if [[ "$#" -eq 0 ]]
then
	read -r -a systemctl < <(systemctl --version)
	if [[ "${systemctl[1]}" -lt 251 ]]
	then
		set -- "/tmp" "/tmp" "/tmp"
	fi
fi

if [[ "$#" -ne 1 ]] && [[ "$#" -ne 3 ]]
then
	echo "This program takes one or three arguments." >&2
	exit 234
elif [[ "$#" -eq 1 ]]
then
	set -- "$1" "$1" "$1"
fi

arg_blkpg_enabled="yes"
proc_cmdline_parse

if [[ "${arg_blkpg_enabled:-yes}" == "no" ]]
then
	exit
fi

blkpgtab="${SYSTEMD_BLKPGTAB:-$ROOT/etc/blkpgtab}"
if [[ ! -e "$blkpgtab" ]]
then
	exit
fi

mapfile -t lines <"$blkpgtab"
for line in "${lines[@]}"
do
	read -r -a words <<<"$line"
	if [[ "${words[0]}" =~ ^# ]] || [ "${#words[@]}" -lt 4 ]
	then
		continue
	fi

	what="${words[0]}"
	pno="${words[1]}"
	start="${words[2]}"
	length="${words[3]}"

	if ! what_escaped="$(systemd-escape "${what:1}")"
	then
		exit 1
	fi

	if ! unit="blkpg-${what_escaped}p${pno}.service"
	then
		exit 1
	fi

	mkdir -p "$ROOT$1"
	add_service "$blkpgtab" \
	            "$what_escaped" \
	            "$what" \
		    "$pno" \
		    "$start" \
		    "$length" >"$ROOT$1/$unit"
	mkdir -p "$ROOT$1/sysinit.target.wants"
	ln -sf "../$unit" "$ROOT$1/sysinit.target.wants/$unit"
done
